---
import Layout from '../layouts/Layout.astro';
import { articles } from '../data/articles';

const sortedArticles = Object.entries(articles)
    .map(([slug, article]) => ({
        slug,
        ...article,
    }))
    .sort((a, b) => new Date(b.publishDate).getTime() - new Date(a.publishDate).getTime());

// Group articles by date
const articlesByDate = sortedArticles.reduce((acc, article) => {
    const date = new Date(article.publishDate).toLocaleDateString('en-US', {
        year: 'numeric',
        month: 'long',
        day: 'numeric'
    });
    if (!acc[date]) {
        acc[date] = [];
    }
    acc[date].push(article);
    return acc;
}, {} as Record<string, typeof sortedArticles>);
---

<Layout title="News Archive">
    <div class="archive-page">
        <h1>ARTICLES</h1>
        
        <div class="search-container">
            <input 
                type="text" 
                id="searchInput" 
                placeholder="Search articles..."
                class="search-input"
            />
        </div>

        <div class="archive-grid" id="articleGrid">
            {Object.entries(articlesByDate).map(([date, dateArticles]) => (
                <div class="date-group" data-date={date}>
                    <h3 class="date-header">{date}</h3>
                    {dateArticles.map((article) => (
                        <a href={`/articles/${article.slug}`} class="archive-item">
                            <div class="thumbnail">
                                <img src={article.coverImage} alt={article.title} />
                        {article.isLatestNews && <span class="latest-badge">Latest</span>}
                            </div>
                            <div class="content">
                                <div class="meta">
                                    <img src={article.author.avatar} alt={article.author.name} class="author-avatar" />
                                    <div class="author-info">
                                        <span class="author-name">{article.author.name}</span>
                                        <span class="author-role">{article.author.role}</span>
                                    </div>
                                </div>
                                <h2>{article.title}</h2>
                                <p class="excerpt">{article.excerpt}</p>
                            </div>
                        </a>
                    ))}
                </div>
            ))}
        </div>
    </div>
</Layout>

<script>
    const searchInput = document.getElementById('searchInput') as HTMLInputElement;
    const articleGrid = document.getElementById('articleGrid');

    searchInput?.addEventListener('input', (e) => {
        const searchTerm = (e.target as HTMLInputElement).value.toLowerCase();
        const dateGroups = articleGrid?.getElementsByClassName('date-group');

        if (dateGroups) {
            Array.from(dateGroups).forEach((dateGroup) => {
                const articles = dateGroup.getElementsByClassName('archive-item');
                let hasVisibleArticles = false;

                Array.from(articles).forEach((article) => {
                    const title = article.querySelector('h2')?.textContent?.toLowerCase() || '';
                    const author = article.querySelector('.author-name')?.textContent?.toLowerCase() || '';
                    const role = article.querySelector('.author-role')?.textContent?.toLowerCase() || '';
                    const excerpt = article.querySelector('.excerpt')?.textContent?.toLowerCase() || '';
                    
                    const shouldShow = title.includes(searchTerm) || 
                                     author.includes(searchTerm) || 
                                     role.includes(searchTerm) ||
                                     excerpt.includes(searchTerm);
                    
                    (article as HTMLElement).style.display = shouldShow ? 'block' : 'none';
                    if (shouldShow) hasVisibleArticles = true;
                });

                // Show/hide date group based on whether it has visible articles
                (dateGroup as HTMLElement).style.display = hasVisibleArticles ? 'block' : 'none';
            });
        }
    });
</script>

<style>
    .archive-page {
        padding: 2rem 0;
    }

    h1 {
        text-align: center;
        margin-bottom: 2rem;
        background-image: var(--accent-gradient);
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
        background-size: 400%;
        background-position: 0%;
    }

    .search-container {
        margin-bottom: 2rem;
    }

    .search-input {
        width: 100%;
        padding: 0.8rem 1rem;
        border: 1px solid rgba(255, 255, 255, 0.1);
        border-radius: 8px;
        background: rgba(255, 255, 255, 0.05);
        color: white;
        font-size: 1rem;
    }

    .search-input:focus {
        outline: none;
        border-color: rgb(var(--accent));
    }

    .date-group {
        margin-bottom: 2rem;
    }

    .date-header {
        color: rgb(var(--accent-light));
        font-size: 1.2rem;
        margin-bottom: 1rem;
        padding-bottom: 0.5rem;
        border-bottom: 1px solid rgba(255, 255, 255, 0.1);
    }

    .archive-grid {
        display: flex;
        flex-direction: column;
        gap: 2rem;
    }

    .archive-item {
        display: block;
        text-decoration: none;
        background: rgba(255, 255, 255, 0.05);
        border-radius: 12px;
        overflow: hidden;
        transition: transform 0.2s ease;
        margin-bottom: 1rem;
    }

    .archive-item:hover {
        transform: translateY(-4px);
    }

    .thumbnail {
        width: 100%;
        height: 200px;
        overflow: hidden;
        position: relative;
    }

    .thumbnail img {
        width: 100%;
        height: 100%;
        object-fit: cover;
    }

    .latest-badge {
        position: absolute;
        top: 1rem;
        right: 1rem;
        background: rgb(var(--accent));
        color: white;
        padding: 0.25rem 0.75rem;
        border-radius: 20px;
        font-size: 0.875rem;
        font-weight: 500;
    }

    .content {
        padding: 1.5rem;
    }

    .meta {
        display: flex;
        align-items: center;
        gap: 0.8rem;
        margin-bottom: 1rem;
    }

    .author-avatar {
        width: 40px;
        height: 40px;
        border-radius: 50%;
        object-fit: cover;
    }

    .author-info {
        display: flex;
        flex-direction: column;
        gap: 0.2rem;
    }

    .author-name {
        color: rgb(var(--accent-light));
        font-weight: 500;
    }

    .author-role {
        font-size: 0.875rem;
        color: #888;
    }

    h2 {
        font-size: 1.5rem;
        margin: 0.5rem 0;
        color: white;
    }

    .excerpt {
        color: #ccc;
        font-size: 0.95rem;
        line-height: 1.6;
    }
</style>